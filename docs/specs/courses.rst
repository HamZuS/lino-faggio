.. _voga.specs.courses:

=======
Courses
=======

.. to test only this doc:

    $ python setup.py test -s tests.DocsTests.test_courses

    >>> from lino import startup
    >>> startup('lino_voga.projects.roger.settings.doctests')
    >>> from lino.api.doctest import *
    
    
This document analyzes the demo courses generated by 
:mod:`lino_voga.lib.voga.fixtures.buche`.


Pupils and teachers
===================

Lino Voga adds specific models for teachers and pupils.
A teacher is a person with a `teacher_type`.
A pupil is a person with a `pupil_type`.

The :mod:`lino_cosi.lib.courses` plugin has two settings
:attr:`teacher_model<lino_cosi.lib.courses.Plugin.teacher_model>`
and
:attr:`pupil_model<lino_cosi.lib.courses.Plugin.pupil_model>`:


>>> dd.plugins.courses.teacher_model
'courses.Teacher'

>>> dd.plugins.courses.pupil_model
'courses.Pupil'

>>> ses = rt.login('robin')

>>> ses.show(courses.PupilTypes)
==== =========== ============= ================== ==================
 ID   Reference   Designation   Designation (de)   Designation (fr)
---- ----------- ------------- ------------------ ------------------
 1    M           Member        Mitglied           Member
 2    H           Helper        Helfer             Helper
 3    N           Non-member    Nicht-Mitglied     Non-member
==== =========== ============= ================== ==================
<BLANKLINE>

>>> ses.show(courses.TeacherTypes)
==== =========== ================== ======================= ======================
 ID   Reference   Designation        Designation (de)        Designation (fr)
---- ----------- ------------------ ----------------------- ----------------------
 1    S           Independant        Selbstständig           Indépendant
 2    EP          Voluntary (flat)   Ehrenamtlich pauschal   Volontaire (forfait)
 3    ER          Voluntary (real)   Ehrenamtlich real       Volontaire (réel)
 4    LBA         LEA                LBA                     ALE
==== =========== ================== ======================= ======================
<BLANKLINE>


The fee of a course
===================

Per course and per enrolment we get a new field :attr:`fee`.

Number of places
================

The :attr:`max_places<lino_cosi.lib.courses.models.Course.max_places>`
(:ddref:`courses.Course.max_places`) field of a *course* contains the
number of available places.

It is a simple integer value and expresses an *absolute* upper limit
which cannot be bypassed. Lino will refuse to confirm an enrolment if
this limit is reached. Here is a user statement about this:

    Also im Prinzip nehmen wir bei den Computerkursen maximal 10 Leute
    an. Da wir aber überall über 12 Geräte verfügen, können wir immer
    im Bedarfsfall um 2 Personen aufstocken. Also bei PC-Kursen setzen 
    wir das Maximum immer auf 12. Als Regel gilt dann, dass wir immer nur
    10 annehmen, aber falls unbedingt erforderlich auf 12 gehen
    können.

Every *enrolment* has a field
:attr:`places<lino_cosi.lib.courses.models.Enrolment.places>`
(:ddref:`courses.Enrolment.places`) which expresses how many places
this enrolment takes. This is usually 1, but for certain types of
courses, e.g. bus travels, it can happen that one enrolment is for two
or more persons.


Automatic calender events
=========================

The first demo course starts on December 2, 2013:

>>> obj = courses.Course.objects.get(pk=3)
>>> print(obj)
Course #3


..

    Repair from previous incomplete test runs.

    >>> obj.do_update_events(ses)
    >>> ses.response['success']
    True



>>> ses.show(cal.EventsByController, obj, column_names="when_text state")
======================== ===========
 When                     State
------------------------ -----------
 Mon 28/04/2014 (13:30)   Suggested
 Mon 05/05/2014 (13:30)   Suggested
 Mon 12/05/2014 (13:30)   Suggested
 Mon 19/05/2014 (13:30)   Suggested
 Mon 26/05/2014 (13:30)   Suggested
 Mon 02/06/2014 (13:30)   Suggested
 Mon 16/06/2014 (13:30)   Suggested
 Mon 23/06/2014 (13:30)   Suggested
======================== ===========
<BLANKLINE>


We run the UpdateEvents action a first time and verify that the events
remain unchanged (if the following fails, make sure you've run
:cmd:`inv initdb` before running :cmd:`inv test`).

>>> # import logging
>>> # logger = logging.getLogger('lino')
>>> # logger.setLevel('DEBUG')
>>> res = ses.run(obj.do_update_events)
>>> res['success']
True
>>> print(res['info_message'])
Update Events for Course #3...
Generating events between 2014-04-28 and 2019-05-22.
8 row(s) have been updated.
>>> ses.show(cal.EventsByController, obj, column_names="when_text state")
======================== ===========
 When                     State
------------------------ -----------
 Mon 28/04/2014 (13:30)   Suggested
 Mon 05/05/2014 (13:30)   Suggested
 Mon 12/05/2014 (13:30)   Suggested
 Mon 19/05/2014 (13:30)   Suggested
 Mon 26/05/2014 (13:30)   Suggested
 Mon 02/06/2014 (13:30)   Suggested
 Mon 16/06/2014 (13:30)   Suggested
 Mon 23/06/2014 (13:30)   Suggested
======================== ===========
<BLANKLINE>


We select the event no 4 (2013-12-23, 20140519):

>>> qs = obj.get_existing_auto_events()
>>> e = qs.get(start_date=i2d(20140519))

Yes, the state is "suggested":

>>> print(e.state)
Suggested

Now we move that to the week after:

>>> e.move_next(ses)
>>> ses.response['success']
True
>>> print(ses.response['info_message'])
Update Events for Course #3...
Generating events between 2014-04-28 and 2019-05-22.
8 row(s) have been updated.
Move down for Course #3 Hour 4...
1 row(s) have been updated.


The state is now "draft":

>>> print(e.state)
Draft

We have now two events on 2014-05-26:

>>> ses.show(cal.EventsByController, obj, column_names="when_text state")
======================== ===========
 When                     State
------------------------ -----------
 Mon 28/04/2014 (13:30)   Suggested
 Mon 05/05/2014 (13:30)   Suggested
 Mon 12/05/2014 (13:30)   Suggested
 Mon 26/05/2014 (13:30)   Draft
 Mon 26/05/2014 (13:30)   Suggested
 Mon 02/06/2014 (13:30)   Suggested
 Mon 16/06/2014 (13:30)   Suggested
 Mon 23/06/2014 (13:30)   Suggested
======================== ===========
<BLANKLINE>


To solve that, we must click on the lightning button:

>>> obj.do_update_events(ses)
>>> ses.response['success']
True

>>> ses.show(cal.EventsByController, obj, column_names="when_text state")
======================== ===========
 When                     State
------------------------ -----------
 Mon 28/04/2014 (13:30)   Suggested
 Mon 05/05/2014 (13:30)   Suggested
 Mon 12/05/2014 (13:30)   Suggested
 Mon 26/05/2014 (13:30)   Draft
 Mon 02/06/2014 (13:30)   Suggested
 Mon 09/06/2014 (13:30)   Suggested
 Mon 23/06/2014 (13:30)   Suggested
 Mon 30/06/2014 (13:30)   Suggested
======================== ===========
<BLANKLINE>

Voilà. Note that the state "Draft" is normal: it indicates that the
event has been manually modified.

Now for this test, in order to restore original state, we click on the
"Reset" button:

>>> e.state = cal.EventStates.suggested
>>> e.save()

and re-run UpdateEvents a last time:

>>> res = ses.run(obj.do_update_events)
>>> res['success']
True
>>> ses.show(cal.EventsByController, obj, column_names="when_text state")
======================== ===========
 When                     State
------------------------ -----------
 Mon 28/04/2014 (13:30)   Suggested
 Mon 05/05/2014 (13:30)   Suggested
 Mon 12/05/2014 (13:30)   Suggested
 Mon 19/05/2014 (13:30)   Suggested
 Mon 26/05/2014 (13:30)   Suggested
 Mon 02/06/2014 (13:30)   Suggested
 Mon 16/06/2014 (13:30)   Suggested
 Mon 23/06/2014 (13:30)   Suggested
======================== ===========
<BLANKLINE>


Waiting things
==============


The following is waiting for :ticket:`526` before it can work:

>>> # demo_get('robin', 'choices/courses/Courses/city', 'bla', 0)


CoursesByLine
=============

There are two Yoga courses:

>>> obj = courses.Line.objects.get(pk=10)
>>> obj
Line #10 ('Yoga')
        
>>> rt.show(courses.CoursesByLine, obj)
============== ============== ================== ============= ================
 Info           When           Room               Times         Instructor
-------------- -------------- ------------------ ------------- ----------------
 *Course #24*   Every Monday   Conferences room   18:00-19:30   David da Vinci
 *Course #25*   Every Friday   Conferences room   19:00-20:30   Hans Altenberg
============== ============== ================== ============= ================
<BLANKLINE>


>>> ContentType = rt.modules.contenttypes.ContentType
>>> json_fields = 'count rows title success no_data_text param_values'
>>> kw = dict(fmt='json', limit=10, start=0)
>>> mt = ContentType.objects.get_for_model(courses.Line).pk
>>> demo_get('robin',
...          'api/courses/CoursesByLine', json_fields, 3, 
...          mt=mt, mk=obj.pk, **kw)


Status report
=============

The status report gives an overview of active courses.

(TODO: demo fixture should avoid negative free places)

>>> rt.show(courses.StatusReport)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
~~~~~~~~
Journeys
~~~~~~~~
<BLANKLINE>
No data to display
~~~~~~~~
Computer
~~~~~~~~
<BLANKLINE>
==================== ============= ================= ============= ================== =========== ============= ===========
 Info                 Designation   When              Times         Available places   Confirmed   Free places   Requested
-------------------- ------------- ----------------- ------------- ------------------ ----------- ------------- -----------
 *Course #3*                        Every Monday      13:30-15:00   3                  **2**       1             **3**
 *Course #4*                        Every Wednesday   17:30-19:00   3                  **3**       0             **3**
 *Course #5*                        Every Friday      13:30-15:00   3                  **3**       0             **2**
 *Course #6*                        Every Monday      13:30-15:00   4                  **6**       -2
 *Course #7*                        Every Wednesday   17:30-19:00   4                  **6**       -2
 *Course #8*                        Every Friday      13:30-15:00   4                  **6**       -2
 **Total (6 rows)**                                                 **21**             **26**                    **8**
==================== ============= ================= ============= ================== =========== ============= ===========
<BLANKLINE>
~~~~~
Sport
~~~~~
<BLANKLINE>
===================== ============= ================= ============= ================== =========== ============= ===========
 Info                  Designation   When              Times         Available places   Confirmed   Free places   Requested
--------------------- ------------- ----------------- ------------- ------------------ ----------- ------------- -----------
 *Course #9*                         Every Wednesday   19:00-20:00   10                 **2**       8             **3**
 *Course #10*                        Every Monday      11:00-12:00   5                  **3**       2             **3**
 *Course #11*                        Every Monday      13:30-14:30   5                  **3**       2             **2**
 *Course #12*                        Every Monday      11:00-12:00   20                 **5**       15
 *Course #13*                        Every Monday      13:30-14:30   20                 **5**       15
 *Course #14*                        Every Tuesday     11:00-12:00   20                 **5**       15
 *Course #15*                        Every Tuesday     13:30-14:30   20                 **5**       15
 *Course #16*                        Every Thursday    11:00-12:00   20                 **5**       15
 *Course #17*                        Every Thursday    13:30-14:30   20                 **5**       15
 *Course #18*                        Every Friday      18:00-19:00   12                 **2**       10            **3**
 *Course #19*                        Every Friday      19:00-20:00   12                 **3**       9             **3**
 **Total (11 rows)**                                                 **164**            **43**                    **14**
===================== ============= ================= ============= ================== =========== ============= ===========
<BLANKLINE>
~~~~~~~~~~
Meditation
~~~~~~~~~~
<BLANKLINE>
==================== ============= ============== ============= ================== =========== ============= ===========
 Info                 Designation   When           Times         Available places   Confirmed   Free places   Requested
-------------------- ------------- -------------- ------------- ------------------ ----------- ------------- -----------
 *Course #20*                       Every Monday   18:00-19:30                      **3**       Unlimited     **2**
 *Course #21*                       Every Friday   19:00-20:30                      **2**       Unlimited     **3**
 *Course #22*                       Every Monday   18:00-19:30   30                 **6**       24
 *Course #23*                       Every Friday   19:00-20:30   30                 **6**       24
 *Course #24*                       Every Monday   18:00-19:30   20                 **2**       18            **3**
 *Course #25*                       Every Friday   19:00-20:30   20                 **3**       17            **3**
 **Total (6 rows)**                                              **100**            **22**                    **11**
==================== ============= ============== ============= ================== =========== ============= ===========
<BLANKLINE>
~~~~~~~
Externe
~~~~~~~
<BLANKLINE>
No data to display


Free places
===========

Note the *free places* field which is not always trivial. In course
#12 there are 8 confirmed enrolments, but only 5 of them are actually
taking a place because the 3 other ones are already ended.

>>> obj = courses.Course.objects.get(pk=12)
>>> print(obj.max_places)
20
>>> print(obj.get_free_places())
15
>>> rt.show(courses.EnrolmentsByCourse, obj, column_names="pupil start_date end_date places")
=================================== ============ ============ =============
 Participant                         Start date   End date     Places used
----------------------------------- ------------ ------------ -------------
 Gregory Groteclaes                               12/05/2014   1
 Christian Radermacher               03/06/2014                1
 Marie-Louise Vandenmeulenbos        30/05/2014                1
 Dorothée Dobbelstein-Demeulenaere   21/05/2014                1
 Laura Laschet                       02/05/2014   09/05/2014   1
 Didier di Rupo                                   02/05/2014   1
 Hans Altenberg                      09/06/2014                1
 Gregory Groteclaes                  29/05/2014                1
 **Total (8 rows)**                                            **8**
=================================== ============ ============ =============
<BLANKLINE>

Above situation is because we are working on 20140522:

>>> print(dd.today())
2014-05-22

The same request on earlier dates yields different results:

On 20140101 nobody has left yet, 5+3 places are taken and therefore
20-8=12 places are free:

>>> print(obj.get_free_places(i2d(20140101)))
12

On 20140503 we have 5+2 places taken because only 1 of the three
early-leavers has left:

>>> print(obj.get_free_places(i2d(20140503)))
13

On 20140502 is Didier di Rupo's last day, so his place is not yet
free:

>>> print(obj.get_free_places(i2d(20140502)))
12



Filtering pupils
================

>>> print(rt.modules.courses.Pupils.params_layout.main)
aged_from aged_to gender show_members show_lfv show_ckk show_raviva

There are 36 pupils (21 men and 15 women) in our database:

>>> json_fields = 'count rows title success no_data_text param_values'
>>> kwargs = dict(fmt='json', limit=10, start=0)
>>> demo_get('robin', 'api/courses/Pupils', json_fields, 36, **kwargs)

>>> kwargs.update(pv=['', '', 'M', '', '', '', ''])
>>> demo_get('robin', 'api/courses/Pupils', json_fields, 21, **kwargs)

>>> kwargs.update(pv=['', '', 'F', '', '', '', ''])
>>> demo_get('robin', 'api/courses/Pupils', json_fields, 15, **kwargs)


>>> json_fields = 'navinfo disable_delete data id title'
>>> kwargs = dict(fmt='json', an='detail')
>>> demo_get('robin', 'api/courses/Lines/2', json_fields, **kwargs)
