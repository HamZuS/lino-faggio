.. _voga.specs.courses:

=======
Courses
=======

.. to test only this doc:

    $ python setup.py test -s tests.DocsTests.test_courses

    >>> from lino import startup
    >>> startup('lino_voga.projects.roger.settings.doctests')
    >>> from lino.api.doctest import *
    
    
This document analyzes the demo courses generated by 
:mod:`lino_voga.lib.voga.fixtures.buche`.


Pupils and teachers
===================

Lino Voga adds specific models for teachers and pupils.
A teacher is a person with a `teacher_type`.
A pupil is a person with a `pupil_type`.

The :mod:`lino_cosi.lib.courses` plugin has two settings
:attr:`teacher_model<lino_cosi.lib.courses.Plugin.teacher_model>`
and
:attr:`pupil_model<lino_cosi.lib.courses.Plugin.pupil_model>`:


>>> dd.plugins.courses.teacher_model
'courses.Teacher'

>>> dd.plugins.courses.pupil_model
'courses.Pupil'

>>> ses = rt.login('robin')

>>> ses.show(rt.actors.courses.PupilTypes)
==== =========== ============= ================== ==================
 ID   Reference   Designation   Designation (de)   Designation (fr)
---- ----------- ------------- ------------------ ------------------
 1    M           Member        Mitglied           Member
 2    H           Helper        Helfer             Helper
 3    N           Non-member    Nicht-Mitglied     Non-member
==== =========== ============= ================== ==================
<BLANKLINE>

>>> ses.show(rt.actors.courses.TeacherTypes)
==== =========== ================== ======================= ======================
 ID   Reference   Designation        Designation (de)        Designation (fr)
---- ----------- ------------------ ----------------------- ----------------------
 1    S           Independant        Selbstständig           Indépendant
 2    EP          Voluntary (flat)   Ehrenamtlich pauschal   Volontaire (forfait)
 3    ER          Voluntary (real)   Ehrenamtlich real       Volontaire (réel)
 4    LBA         LEA                LBA                     ALE
==== =========== ================== ======================= ======================
<BLANKLINE>


See also :doc:`pupils`.


The fee of a course
===================

Per course and per enrolment we get a new field :attr:`fee`.

Number of places
================

The :attr:`max_places<lino_cosi.lib.courses.models.Course.max_places>`
(:ddref:`courses.Course.max_places`) field of a *course* contains the
number of available places.

It is a simple integer value and expresses an *absolute* upper limit
which cannot be bypassed. Lino will refuse to confirm an enrolment if
this limit is reached. Here is a user statement about this:

    Also im Prinzip nehmen wir bei den Computerkursen maximal 10 Leute
    an. Da wir aber überall über 12 Geräte verfügen, können wir immer
    im Bedarfsfall um 2 Personen aufstocken. Also bei PC-Kursen setzen 
    wir das Maximum immer auf 12. Als Regel gilt dann, dass wir immer nur
    10 annehmen, aber falls unbedingt erforderlich auf 12 gehen
    können.

Every *enrolment* has a field
:attr:`places<lino_cosi.lib.courses.models.Enrolment.places>`
(:ddref:`courses.Enrolment.places`) which expresses how many places
this enrolment takes. This is usually 1, but for certain types of
courses, e.g. bus travels, it can happen that one enrolment is for two
or more persons.


Automatic calender events
=========================

For the following examples we select a course which did not yet start,
i.e. which starts after :meth:`lino.core.site.Site.today`.

>>> for obj in courses.Course.objects.filter(start_date__gte=dd.today()):
...     print("Course #{} starts {} and has {} events".format(obj.id, obj.start_date, obj.max_events))
...     # doctest: +NORMALIZE_WHITESPACE
Course #12 starts 2015-07-11 and has 10 events
Course #13 starts 2015-07-11 and has 10 events
Course #14 starts 2015-07-11 and has 10 events
Course #15 starts 2015-07-11 and has 10 events
Course #16 starts 2015-07-11 and has 10 events
Course #17 starts 2015-07-11 and has 10 events

Let's take the first of them:

>>> obj = courses.Course.objects.get(pk=12)

..

    Repair from previous incomplete test runs if necessary.

    >>> obj.do_update_events(ses)
    >>> ses.response['success']
    True


>>> ses.show(cal.EventsByController, obj, column_names="when_text state")
======================== ===========
 When                     State
------------------------ -----------
 Mon 21/03/2016 (11:00)   Suggested
 Mon 04/04/2016 (11:00)   Suggested
 Mon 11/04/2016 (11:00)   Suggested
 Mon 18/04/2016 (11:00)   Suggested
 Mon 25/04/2016 (11:00)   Suggested
 Mon 02/05/2016 (11:00)   Suggested
 Mon 09/05/2016 (11:00)   Suggested
 Mon 23/05/2016 (11:00)   Suggested
 Mon 30/05/2016 (11:00)   Suggested
 Mon 06/06/2016 (11:00)   Suggested
======================== ===========
<BLANKLINE>


We run the :class:`UpdateEvents <lino_xl.lib.cal.mixins.UpdateEvents>`
action a first time and verify that the events remain unchanged (if
the following fails, make sure you've run :cmd:`inv initdb` before
running :cmd:`inv test`).

>>> res = ses.run(obj.do_update_events)
>>> res['success']
True
>>> print(res['info_message'])
Update Events for 012 Rücken (Swimming)...
Generating events between 2015-07-13 and 2020-05-22.
10 row(s) have been updated.
>>> ses.show(cal.EventsByController, obj, column_names="when_text summary state")
======================== ============= ===========
 When                     Summary       State
------------------------ ------------- -----------
 Mon 21/03/2016 (11:00)   012 Hour 1    Suggested
 Mon 04/04/2016 (11:00)   012 Hour 2    Suggested
 Mon 11/04/2016 (11:00)   012 Hour 3    Suggested
 Mon 18/04/2016 (11:00)   012 Hour 4    Suggested
 Mon 25/04/2016 (11:00)   012 Hour 5    Suggested
 Mon 02/05/2016 (11:00)   012 Hour 6    Suggested
 Mon 09/05/2016 (11:00)   012 Hour 7    Suggested
 Mon 23/05/2016 (11:00)   012 Hour 8    Suggested
 Mon 30/05/2016 (11:00)   012 Hour 9    Suggested
 Mon 06/06/2016 (11:00)   012 Hour 10   Suggested
======================== ============= ===========
<BLANKLINE>

We select the event no 4 (2013-12-23, 20140519):

>>> qs = obj.get_existing_auto_events()
>>> e = qs.get(start_date=i2d(20160418))

Yes, the state is "suggested":

>>> print(e.state)
Suggested

Now we move that event to the next available date (the week after in
our case):

>>> e.move_next(ses)
>>> ses.response['success']
True
>>> print(ses.response['info_message'])
Update Events for 012 Rücken (Swimming)...
Generating events between 2015-07-13 and 2020-05-22.
10 row(s) have been updated.
Move down for Activity #12 012 Hour 4...
Generating events between 2015-07-13 and 2020-05-22.
1 row(s) have been updated.


The state is now "draft":

>>> print(e.state)
Draft

Note that all subsequent events have also been moved to their next
available date.

>>> ses.show(cal.EventsByController, obj, column_names="when_text summary state")
======================== ============= ===========
 When                     Summary       State
------------------------ ------------- -----------
 Mon 21/03/2016 (11:00)   012 Hour 1    Suggested
 Mon 04/04/2016 (11:00)   012 Hour 2    Suggested
 Mon 11/04/2016 (11:00)   012 Hour 3    Suggested
 Mon 25/04/2016 (11:00)   012 Hour 4    Draft
 Mon 02/05/2016 (11:00)   012 Hour 5    Suggested
 Mon 09/05/2016 (11:00)   012 Hour 6    Suggested
 Mon 16/05/2016 (11:00)   012 Hour 7    Suggested
 Mon 30/05/2016 (11:00)   012 Hour 8    Suggested
 Mon 06/06/2016 (11:00)   012 Hour 9    Suggested
 Mon 13/06/2016 (11:00)   012 Hour 10   Suggested
======================== ============= ===========
<BLANKLINE>

The state "Draft" is normal: it indicates that the event has been
manually modified.

.. Now for this test, in order to restore original state, we click on
   the "Reset" button:

    >>> e.state = cal.EventStates.suggested
    >>> e.save()

    and re-run UpdateEvents a last time:

    >>> res = ses.run(obj.do_update_events)
    >>> res['success']
    True
    >>> ses.show(cal.EventsByController, obj, column_names="when_text state")
    ======================== ===========
     When                     State
    ------------------------ -----------
     Mon 21/03/2016 (11:00)   Suggested
     Mon 04/04/2016 (11:00)   Suggested
     Mon 11/04/2016 (11:00)   Suggested
     Mon 18/04/2016 (11:00)   Suggested
     Mon 25/04/2016 (11:00)   Suggested
     Mon 02/05/2016 (11:00)   Suggested
     Mon 09/05/2016 (11:00)   Suggested
     Mon 23/05/2016 (11:00)   Suggested
     Mon 30/05/2016 (11:00)   Suggested
     Mon 06/06/2016 (11:00)   Suggested
    ======================== ===========
    <BLANKLINE>


Waiting things
==============


The following is waiting for :ticket:`526` before it can work:

>>> # demo_get('robin', 'choices/courses/Courses/city', 'bla', 0)


CoursesByLine
=============

There are two Yoga courses:

>>> obj = courses.Line.objects.get(pk=10)
>>> obj
Line #10 ('Yoga')
        
>>> rt.show(rt.actors.courses.CoursesByLine, obj)
============= ============== ================== ============= ================
 Info          When           Room               Times         Instructor
------------- -------------- ------------------ ------------- ----------------
 *024C Yoga*   Every Monday   Conferences room   18:00-19:30   David da Vinci
 *025C Yoga*   Every Friday   Conferences room   19:00-20:30   Hans Altenberg
============= ============== ================== ============= ================
<BLANKLINE>


>>> ContentType = rt.modules.contenttypes.ContentType
>>> json_fields = 'count rows title success no_data_text param_values'
>>> kw = dict(fmt='json', limit=10, start=0)
>>> mt = ContentType.objects.get_for_model(courses.Line).pk
>>> demo_get('robin',
...          'api/courses/CoursesByLine', json_fields, 3, 
...          mt=mt, mk=obj.pk, **kw)


Status report
=============

The status report gives an overview of active courses.

(TODO: demo fixture should avoid negative free places)

>>> rt.show(rt.actors.courses.StatusReport)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
~~~~~~~~
Journeys
~~~~~~~~
<BLANKLINE>
==================== ============= ======================= ======= ================== =========== ============= ===========
 Info                 Designation   When                    Times   Available places   Confirmed   Free places   Requested
-------------------- ------------- ----------------------- ------- ------------------ ----------- ------------- -----------
 *001 Greece 2014*    Greece 2014   14/08/2014-20/08/2014   1           Unlimited     0
 **Total (1 rows)**                                        **0**              **1**                     **0**
==================== ============= ======================= ======= ================== =========== ============= ===========
<BLANKLINE>
~~~~~~~~
Computer
~~~~~~~~
<BLANKLINE>
===================================== ============= ================= ============= ================== =========== ============= ===========
 Info                                  Designation   When              Times         Available places   Confirmed   Free places   Requested
------------------------------------- ------------- ----------------- ------------- ------------------ ----------- ------------- -----------
 *003 comp (First Steps)*                            Every Monday      13:30-15:00   3                  3           0             0
 *004 comp (First Steps)*                            Every Wednesday   17:30-19:00   3                  2           1             0
 *005 comp (First Steps)*                            Every Friday      13:30-15:00   3                  2           1             0
 *006C WWW (Internet for beginners)*                 Every Monday      13:30-15:00   4                  2           2             0
 *007C WWW (Internet for beginners)*                 Every Wednesday   17:30-19:00   4                  3           1             0
 *008C WWW (Internet for beginners)*                 Every Friday      13:30-15:00   4                  0           4             1
 **Total (6 rows)**                                                                  **21**             **12**                    **1**
===================================== ============= ================= ============= ================== =========== ============= ===========
<BLANKLINE>
~~~~~
Sport
~~~~~
<BLANKLINE>
=================================== ============= ================= ============= ================== =========== ============= ===========
 Info                                Designation   When              Times         Available places   Confirmed   Free places   Requested
----------------------------------- ------------- ----------------- ------------- ------------------ ----------- ------------- -----------
 *009C BT (Belly dancing)*                         Every Wednesday   19:00-20:00   10                 2           8             1
 *010C FG (Functional gymnastics)*                 Every Monday      11:00-12:00   5                  3           2             0
 *011C FG (Functional gymnastics)*                 Every Monday      13:30-14:30   5                  2           3             0
 *012 Rücken (Swimming)*                           Every Monday      11:00-12:00   20                 3           17            0
 *013 Rücken (Swimming)*                           Every Monday      13:30-14:30   20                 3           17            0
 *014 Rücken (Swimming)*                           Every Tuesday     11:00-12:00   20                 3           17            0
 *015 Rücken (Swimming)*                           Every Tuesday     13:30-14:30   20                 1           19            1
 *016 Rücken (Swimming)*                           Every Thursday    11:00-12:00   20                 4           16            0
 *017 Rücken (Swimming)*                           Every Thursday    13:30-14:30   20                 4           16            0
 *018 SV (Self-defence)*                           Every Friday      18:00-19:00   12                 1           11            2
 *019 SV (Self-defence)*                           Every Friday      19:00-20:00   12                 3           9             0
 **Total (11 rows)**                                                               **164**            **29**                    **4**
=================================== ============= ================= ============= ================== =========== ============= ===========
<BLANKLINE>
~~~~~~~~~~
Meditation
~~~~~~~~~~
<BLANKLINE>
======================================= ============= ============== ============= ================== =========== ============= ===========
 Info                                    Designation   When           Times         Available places   Confirmed   Free places   Requested
--------------------------------------- ------------- -------------- ------------- ------------------ ----------- ------------- -----------
 *020C GLQ (GuoLin-Qigong)*                            Every Monday   18:00-19:30                      3           Unlimited     0
 *021C GLQ (GuoLin-Qigong)*                            Every Friday   19:00-20:30                      1           Unlimited     0
 *022C MED (Finding your inner peace)*                 Every Monday   18:00-19:30   30                 0           30            2
 *023C MED (Finding your inner peace)*                 Every Friday   19:00-20:30   30                 2           28            0
 *024C Yoga*                                           Every Monday   18:00-19:30   20                 2           18            0
 *025C Yoga*                                           Every Friday   19:00-20:30   20                 2           18            0
 **Total (6 rows)**                                                                 **100**            **10**                    **2**
======================================= ============= ============== ============= ================== =========== ============= ===========
<BLANKLINE>
~~~~~~~
Externe
~~~~~~~
<BLANKLINE>
No data to display



Free places
===========

Note the *free places* field which is not always trivial.  Basicially
it contains `max_places - number of confirmed enrolments`.  But it
also looks at the `end_date` of these enrolments.

List of courses which have a confirmed ended enrolment:

>>> qs = courses.Enrolment.objects.filter(end_date__lt=dd.today(),
...     state=courses.EnrolmentStates.confirmed)
>>> for obj in qs:
...     print("{} {}".format(obj.course.id, obj.course.max_places))
4 3
10 5
20 None
8 4
3 3
23 30
2 None
19 12
22 30
25 20
1 None
7 4
11 5
21 None
6 4

In course #25 there are 8 confirmed enrolments, but only 5 of them are
actually taking a place because the 3 other ones are already ended.


>>> obj = courses.Course.objects.get(pk=11)
>>> print(obj.max_places)
5
>>> print(obj.get_free_places())
3
>>> rt.show(rt.actors.courses.EnrolmentsByCourse, obj, column_names="pupil start_date end_date places")
=========================== ============ ============ =============
 Participant                 Start date   End date     Places used
--------------------------- ------------ ------------ -------------
 Laurent Bastiaensen (MES)                             1
 Laura Laschet (ME)                                    1
 Otto Östges (ME)                         08/11/2014   1
 **Total (3 rows)**                                    **3**
=========================== ============ ============ =============
<BLANKLINE>

Above situation is because we are working on 20150522:

>>> print(dd.today())
2015-05-22

The same request on earlier dates yields different results:

On 20140101 nobody has left yet, 5+3 places are taken and therefore
20-8=12 places are free:

>>> print(obj.get_free_places(i2d(20141107)))
2

On 20141108 is Otto's last day, so his place is not yet free:

>>> print(obj.get_free_places(i2d(20141108)))
2

On 20141109 is is:

>>> print(obj.get_free_places(i2d(20141109)))
3



Filtering pupils
================

>>> print(rt.actors.courses.Pupils.params_layout.main)
course partner_list #aged_from #aged_to gender show_members show_lfv show_ckk show_raviva

There are 36 pupils (21 men and 15 women) in our database:

>>> json_fields = 'count rows title success no_data_text param_values'
>>> kwargs = dict(fmt='json', limit=10, start=0)
>>> demo_get('robin', 'api/courses/Pupils', json_fields, 36, **kwargs)

>>> kwargs.update(pv=['', '', 'M', '', '', '', ''])
>>> demo_get('robin', 'api/courses/Pupils', json_fields, 21, **kwargs)

>>> kwargs.update(pv=['', '', 'F', '', '', '', ''])
>>> demo_get('robin', 'api/courses/Pupils', json_fields, 15, **kwargs)


>>> json_fields = 'navinfo disable_delete data id title'
>>> kwargs = dict(fmt='json', an='detail')
>>> demo_get('robin', 'api/courses/Lines/2', json_fields, **kwargs)



.. _voga.presence_sheet:

Presence sheet
==============

The **presence sheet** of a course is a printable document where
course instructors can manually record the presences of the
participants for every event.
