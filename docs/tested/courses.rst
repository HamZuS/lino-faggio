.. _faggio.tested.courses:

Courses
=======

This document analyzes the demo courses generated by 
:mod:`lino_faggio.fixtures.faggio`.

.. include:: /include/tested.rst

>>> from django.conf import settings
>>> from lino.runtime import *
>>> from lino import dd
>>> from lino.utils import i2d
>>> from django.test.client import Client
>>> from django.utils.translation import get_language
>>> from django.utils import translation
>>> import json

>>> settings.SITE.verbose_client_info_message = True

The first demo course starts on December 2, 2013:

>>> obj = courses.Course.objects.get(pk=1)
>>> print(obj)
First Steps (12/2/13 Butgenbach (Computerroom))

>>> ses = settings.SITE.login('robin')
>>> ses.show(courses.EventsByCourse, obj, column_names="when_text state")
============================= ===========
 When                          State
----------------------------- -----------
 **2013 Dec 02 (Mon) 13:30**   Suggested
 **2013 Dec 09 (Mon) 13:30**   Suggested
 **2013 Dec 16 (Mon) 13:30**   Suggested
 **2013 Dec 23 (Mon) 13:30**   Suggested
 **2013 Dec 30 (Mon) 13:30**   Suggested
 **2014 Jan 06 (Mon) 13:30**   Suggested
 **2014 Jan 13 (Mon) 13:30**   Suggested
 **2014 Jan 20 (Mon) 13:30**   Suggested
============================= ===========
<BLANKLINE>


We run the UpdateEvents action a first time and verify that the events
remain unchanged (if the following fails, make sure you've run
:fab:`initdb`).

>>> import logging
>>> logger = logging.getLogger('lino')
>>> logger.setLevel('DEBUG')
>>> res = ses.run(obj.do_update_reminders)
>>> res['success']
True
>>> print(res['info_message'])
Updating events for First Steps (12/2/13 Butgenbach (Computerroom))...
get_next_date() per_weekday 2013-12-02 --> 2013-12-09.
get_next_date() per_weekday 2013-12-09 --> 2013-12-16.
get_next_date() per_weekday 2013-12-16 --> 2013-12-23.
get_next_date() per_weekday 2013-12-23 --> 2013-12-30.
get_next_date() per_weekday 2013-12-30 --> 2014-01-06.
get_next_date() per_weekday 2014-01-06 --> 2014-01-13.
get_next_date() per_weekday 2014-01-13 --> 2014-01-20.
get_next_date() per_weekday 2014-01-20 --> 2014-01-27.
8 reminder(s) have been updated.
>>> ses.show(courses.EventsByCourse, obj, column_names="when_text state")
============================= ===========
 When                          State
----------------------------- -----------
 **2013 Dec 02 (Mon) 13:30**   Suggested
 **2013 Dec 09 (Mon) 13:30**   Suggested
 **2013 Dec 16 (Mon) 13:30**   Suggested
 **2013 Dec 23 (Mon) 13:30**   Suggested
 **2013 Dec 30 (Mon) 13:30**   Suggested
 **2014 Jan 06 (Mon) 13:30**   Suggested
 **2014 Jan 13 (Mon) 13:30**   Suggested
 **2014 Jan 20 (Mon) 13:30**   Suggested
============================= ===========
<BLANKLINE>


We select the event no 4 (20131223):

>>> e = cal.Event.objects.get(course=obj, start_date=i2d(20131223))

Yes, the state is "suggested":

>>> print(e.state)
suggested

Now we move that to the week after:

>>> e.move_next(ses)
>>> res = ses.response
>>> print res
g
>>> res['success']
True
>>> print(res['info_message'])
get_next_date() per_weekday 2013-12-23 --> 2013-12-30.

The state is now "draft":

>>> print(e.state)
draft

We have now two events on 20131230:

>>> ses.show(courses.EventsByCourse, obj, column_names="when_text state")
============================= ===========
 When                          State
----------------------------- -----------
 **2013 Dec 02 (Mon) 13:30**   Suggested
 **2013 Dec 09 (Mon) 13:30**   Suggested
 **2013 Dec 16 (Mon) 13:30**   Suggested
 **2013 Dec 30 (Mon) 13:30**   Draft
 **2013 Jan 06 (Mon) 13:30**   Suggested
 **2014 Jan 13 (Mon) 13:30**   Suggested
 **2014 Jan 20 (Mon) 13:30**   Suggested
 **2014 Jan 27 (Mon) 13:30**   Suggested
============================= ===========
<BLANKLINE>

To solve that, we must click on the lightning button:

>>> res = ses.run(obj.do_update_reminders)
>>> res['success']
True


>>> ses.show(courses.EventsByCourse, obj, column_names="when_text state")
=============================
 When
-----------------------------
 **2013 Dec 02 (Mon) 13:30**
 **2013 Dec 09 (Mon) 13:30**
 **2013 Dec 16 (Mon) 13:30**
 **2013 Dec 30 (Mon) 13:30**
 **2014 Jan 06 (Mon) 13:30**
 **2014 Jan 13 (Mon) 13:30**
 **2014 Jan 20 (Mon) 13:30**
 **2014 Jan 27 (Mon) 13:30**
=============================
<BLANKLINE>


Click on the "Reset" button:

>>> e.state = cal.EventStates.suggested
>>> e.save()

Re-run UpdateEvents to restore original state:

>>> res = ses.run(obj.do_update_reminders)
>>> res['success']
True
>>> ses.show(courses.EventsByCourse, obj, column_names="when_text state")
=============================
 When
-----------------------------
 **2013 Dec 02 (Mon) 13:30**
 **2013 Dec 09 (Mon) 13:30**
 **2013 Dec 16 (Mon) 13:30**
 **2013 Dec 23 (Mon) 13:30**
 **2013 Dec 30 (Mon) 13:30**
 **2014 Jan 06 (Mon) 13:30**
 **2014 Jan 13 (Mon) 13:30**
 **2014 Jan 20 (Mon) 13:30**
=============================
<BLANKLINE>

